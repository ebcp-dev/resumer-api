{"version":3,"sources":["../../src/validation/register.js"],"names":["validateRegisterInput","data","errors","email","password","password2","Validator","isEmail","isEmpty","equals","isValid"],"mappings":";;;;;;AAGA;;;;AAEA;;;;;;AAEA;;;;;AAPA;;AAEA;AAUA,IAAMA,wBAAwB,SAAxBA,qBAAwB,CAACC,IAAD,EAAU;AACtC;AACA,MAAIC,SAAS,EAAb;;AAEA;AACAD,OAAKE,KAAL,GAAa,CAAC,uBAAQF,KAAKE,KAAb,CAAD,GAAuBF,KAAKE,KAA5B,GAAoC,EAAjD;AACAF,OAAKG,QAAL,GAAgB,CAAC,uBAAQH,KAAKG,QAAb,CAAD,GAA0BH,KAAKG,QAA/B,GAA0C,EAA1D;AACAH,OAAKI,SAAL,GAAiB,CAAC,uBAAQJ,KAAKI,SAAb,CAAD,GAA2BJ,KAAKI,SAAhC,GAA4C,EAA7D;;AAEA;AACA,MAAI,CAACC,oBAAUC,OAAV,CAAkBN,KAAKE,KAAvB,CAAL,EAAoC;AAClCD,WAAOC,KAAP,GAAe,mBAAf;AACD;;AAED;AACA,MAAIG,oBAAUE,OAAV,CAAkBP,KAAKE,KAAvB,CAAJ,EAAmC;AACjCD,WAAOC,KAAP,GAAe,oBAAf;AACD;;AAED;AACA,MAAIG,oBAAUE,OAAV,CAAkBP,KAAKG,QAAvB,CAAJ,EAAsC;AACpCF,WAAOE,QAAP,GAAkB,uBAAlB;AACD;;AAED;AACA,MAAIE,oBAAUE,OAAV,CAAkBP,KAAKI,SAAvB,CAAJ,EAAuC;AACrCH,WAAOG,SAAP,GAAmB,+BAAnB;AACD;;AAED;AACA,MAAI,CAACC,oBAAUG,MAAV,CAAiBR,KAAKG,QAAtB,EAAgCH,KAAKI,SAArC,CAAL,EAAsD;AACpDH,WAAOG,SAAP,GAAmB,uBAAnB;AACD;;AAED;AACA,SAAO;AACLH,kBADK;AAELQ,aAAS,uBAAQR,MAAR;AAFJ,GAAP;AAID,CAvCD;AARA;kBAiDeF,qB","file":"register.js","sourcesContent":["/** @module src/validation/register */\n\n/** Import Validator dependency. */\nimport Validator from 'validator';\n/** Import isEmpty custom function*/\nimport isEmpty from './utility/is-empty';\n\n/**\n * Function to validate arguments.\n * Checks if arguments are empty or invalid and returns an error object\n * and a boolean value whether the error object is empty or not.\n */\nconst validateRegisterInput = (data) => {\n  /** Define errors object. */\n  let errors = {};\n\n  /** Replace values to empty string if object key is empty. */\n  data.email = !isEmpty(data.email) ? data.email : '';\n  data.password = !isEmpty(data.password) ? data.password : '';\n  data.password2 = !isEmpty(data.password2) ? data.password2 : '';\n\n  /** Set email to invalid error message if invalid email. */\n  if (!Validator.isEmail(data.email)) {\n    errors.email = 'Email is invalid.';\n  }\n\n  /** Set email value to required error message if empty. */\n  if (Validator.isEmpty(data.email)) {\n    errors.email = 'Email is required.';\n  }\n\n  /** Set password value to required error message if empty. */\n  if (Validator.isEmpty(data.password)) {\n    errors.password = 'Password is required.';\n  }\n\n  /** Set password 2 value to required error message if empty. */\n  if (Validator.isEmpty(data.password2)) {\n    errors.password2 = 'Confirm password is required.';\n  }\n\n  /** Passwords must match error. */\n  if (!Validator.equals(data.password, data.password2)) {\n    errors.password2 = 'Passwords must match.';\n  }\n\n  /** Return errors object and isValid boolean value. */\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateRegisterInput;\n"]}