{"version":3,"sources":["../../src/validation/register.js"],"names":["validateRegisterInput","errors","data","email","password","password2","Validator","isEmail","isEmpty","equals","isValid"],"mappings":";;;;;;AAGA;;;;AAEA;;;;;;AAEA;;;;;AAPA;;AAEA;AAUA,IAAMA,wBAAwB,SAAxBA,qBAAwB,OAAQ;AACpC;AACA,MAAIC,SAAS,EAAb;;AAEA;AACAC,OAAKC,KAAL,GAAa,CAAC,uBAAQD,KAAKC,KAAb,CAAD,GAAuBD,KAAKC,KAA5B,GAAoC,EAAjD;AACAD,OAAKE,QAAL,GAAgB,CAAC,uBAAQF,KAAKE,QAAb,CAAD,GAA0BF,KAAKE,QAA/B,GAA0C,EAA1D;AACAF,OAAKG,SAAL,GAAiB,CAAC,uBAAQH,KAAKG,SAAb,CAAD,GAA2BH,KAAKG,SAAhC,GAA4C,EAA7D;;AAEA;AACA,MAAI,CAACC,oBAAUC,OAAV,CAAkBL,KAAKC,KAAvB,CAAL,EAAoC;AAClCF,WAAOE,KAAP,GACE,uEADF;AAED;;AAED;AACA,MAAIG,oBAAUE,OAAV,CAAkBN,KAAKC,KAAvB,CAAJ,EAAmC;AACjCF,WAAOE,KAAP,GAAe,oBAAf;AACD;;AAED;AACA,MAAIG,oBAAUE,OAAV,CAAkBN,KAAKE,QAAvB,CAAJ,EAAsC;AACpCH,WAAOG,QAAP,GAAkB,uBAAlB;AACD;;AAED;AACA,MAAIE,oBAAUE,OAAV,CAAkBN,KAAKG,SAAvB,CAAJ,EAAuC;AACrCJ,WAAOI,SAAP,GAAmB,+BAAnB;AACD;;AAED;AACA,MAAI,CAACC,oBAAUG,MAAV,CAAiBP,KAAKE,QAAtB,EAAgCF,KAAKG,SAArC,CAAL,EAAsD;AACpDJ,WAAOI,SAAP,GAAmB,uBAAnB;AACD;;AAED;AACA,SAAO;AACLJ,kBADK;AAELS,aAAS,uBAAQT,MAAR;AAFJ,GAAP;AAID,CAxCD;AARA;kBAkDeD,qB","file":"register.js","sourcesContent":["/** @module src/validation/register */\n\n/** Import Validator dependency. */\nimport Validator from 'validator';\n/** Import isEmpty custom function*/\nimport isEmpty from './utility/is-empty';\n\n/**\n * Function to validate arguments.\n * Checks if arguments are empty or invalid and returns an error object\n * and a boolean value whether the error object is empty or not.\n */\nconst validateRegisterInput = data => {\n  /** Define errors object. */\n  let errors = {};\n\n  /** Replace values to empty string if object key is empty. */\n  data.email = !isEmpty(data.email) ? data.email : '';\n  data.password = !isEmpty(data.password) ? data.password : '';\n  data.password2 = !isEmpty(data.password2) ? data.password2 : '';\n\n  /** Set email to invalid error message if invalid email. */\n  if (!Validator.isEmail(data.email)) {\n    errors.email =\n      'Email is invalid. (Make sure email id is at least 6 characters long.)';\n  }\n\n  /** Set email value to required error message if empty. */\n  if (Validator.isEmpty(data.email)) {\n    errors.email = 'Email is required.';\n  }\n\n  /** Set password value to required error message if empty. */\n  if (Validator.isEmpty(data.password)) {\n    errors.password = 'Password is required.';\n  }\n\n  /** Set password 2 value to required error message if empty. */\n  if (Validator.isEmpty(data.password2)) {\n    errors.password2 = 'Confirm password is required.';\n  }\n\n  /** Passwords must match error. */\n  if (!Validator.equals(data.password, data.password2)) {\n    errors.password2 = 'Passwords must match.';\n  }\n\n  /** Return errors object and isValid boolean value. */\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateRegisterInput;\n"]}