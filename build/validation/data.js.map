{"version":3,"sources":["../../src/validation/data.js"],"names":["validateDataInput","data","errors","uniqueData","Validator","isEmpty","isValid"],"mappings":";;;;;;AAGA;;;;AAEA;;;;;;AAEA;;;;;AAPA;;AAEA;AAUA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAClC;AACA,MAAIC,SAAS,EAAb;;AAEA;AACAD,OAAKE,UAAL,GAAkB,CAAC,uBAAQF,KAAKE,UAAb,CAAD,GAA4BF,KAAKE,UAAjC,GAA8C,EAAhE;;AAEA;AACA,MAAIC,oBAAUC,OAAV,CAAkBJ,KAAKE,UAAvB,CAAJ,EAAwC;AACtCD,WAAOC,UAAP,GAAoB,yBAApB;AACD;;AAED;AACA,SAAO;AACLD,kBADK;AAELI,aAAS,uBAAQJ,MAAR;AAFJ,GAAP;AAID,CAjBD;AARA;kBA2BeF,iB","file":"data.js","sourcesContent":["/** @module src/validation/data */\n\n/** Import Validator dependency. */\nimport Validator from 'validator';\n/** Import isEmpty custom function*/\nimport isEmpty from './utility/is-empty';\n\n/**\n * Function to validate arguments.\n * Checks if arguments are empty or invalid and returns an error object\n * and a boolean value whether the error object is empty or not.\n */\nconst validateDataInput = (data) => {\n  /** Define errors object. */\n  let errors = {};\n\n  /** Replace values to empty string if object key is empty. */\n  data.uniqueData = !isEmpty(data.uniqueData) ? data.uniqueData : '';\n\n  /** Set uniqueData value to required error message if empty. */\n  if (Validator.isEmpty(data.uniqueData)) {\n    errors.uniqueData = 'uniqueData is required.';\n  }\n\n  /** Return errors object and isValid boolean value. */\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateDataInput;\n"]}