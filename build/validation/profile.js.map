{"version":3,"sources":["../../src/validation/profile.js"],"names":["validateProfileInput","data","errors","username","status","Validator","isEmpty","website","isURL","require_protocol","linkedin","github","stackoverflow","dribbble","twitter","isValid"],"mappings":";;;;;;AAGA;;;;AAEA;;;;;;AAEA;;;;;AAPA;;AAEA;AAUA,IAAMA,uBAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAU;AACrC;AACA,MAAIC,SAAS,EAAb;;AAEA;AACAD,OAAKE,QAAL,GAAgB,CAAC,uBAAQF,KAAKE,QAAb,CAAD,GAA0BF,KAAKE,QAA/B,GAA0C,EAA1D;AACAF,OAAKG,MAAL,GAAc,CAAC,uBAAQH,KAAKG,MAAb,CAAD,GAAwBH,KAAKG,MAA7B,GAAsC,EAApD;;AAEA;AACA,MAAIC,oBAAUC,OAAV,CAAkBL,KAAKE,QAAvB,CAAJ,EAAsC;AACpCD,WAAOC,QAAP,GAAkB,uBAAlB;AACD;;AAED;AACA,MAAIE,oBAAUC,OAAV,CAAkBL,KAAKG,MAAvB,CAAJ,EAAoC;AAClCF,WAAOE,MAAP,GAAgB,qBAAhB;AACD;;AAED;AACA,MACEH,KAAKM,OAAL,IACA,CAACF,oBAAUG,KAAV,CAAgBP,KAAKM,OAArB,EAA8B;AAC7BE,sBAAkB;AADW,GAA9B,CAFH,EAKE;AACAP,WAAOK,OAAP,GAAiB,yBAAjB;AACD;;AAED;AACA,MACEN,KAAKS,QAAL,IACA,CAACL,oBAAUG,KAAV,CAAgBP,KAAKS,QAArB,EAA+B;AAC9BD,sBAAkB;AADY,GAA/B,CAFH,EAKE;AACAP,WAAOQ,QAAP,GAAkB,0BAAlB;AACD;;AAED;AACA,MACET,KAAKU,MAAL,IACA,CAACN,oBAAUG,KAAV,CAAgBP,KAAKU,MAArB,EAA6B;AAC5BF,sBAAkB;AADU,GAA7B,CAFH,EAKE;AACAP,WAAOS,MAAP,GAAgB,wBAAhB;AACD;;AAED;AACA,MACEV,KAAKW,aAAL,IACA,CAACP,oBAAUG,KAAV,CAAgBP,KAAKW,aAArB,EAAoC;AACnCH,sBAAkB;AADiB,GAApC,CAFH,EAKE;AACAP,WAAOU,aAAP,GAAuB,gCAAvB;AACD;;AAED;AACA,MACEX,KAAKY,QAAL,IACA,CAACR,oBAAUG,KAAV,CAAgBP,KAAKY,QAArB,EAA+B;AAC9BJ,sBAAkB;AADY,GAA/B,CAFH,EAKE;AACAP,WAAOW,QAAP,GAAkB,0BAAlB;AACD;;AAED;AACA,MACEZ,KAAKa,OAAL,IACA,CAACT,oBAAUG,KAAV,CAAgBP,KAAKa,OAArB,EAA8B;AAC7BL,sBAAkB;AADW,GAA9B,CAFH,EAKE;AACAP,WAAOY,OAAP,GAAiB,yBAAjB;AACD;;AAED;AACA,SAAO;AACLZ,kBADK;AAELa,aAAS,uBAAQb,MAAR;AAFJ,GAAP;AAID,CAnFD;AARA;kBA6FeF,oB","file":"profile.js","sourcesContent":["/** @module src/validation/profile */\n\n/** Import Validator dependency. */\nimport Validator from 'validator';\n/** Import isEmpty custom function*/\nimport isEmpty from './utility/is-empty';\n\n/**\n * Function to validate arguments.\n * Checks if arguments are empty or invalid and returns an error object\n * and a boolean value whether the error object is empty or not.\n */\nconst validateProfileInput = (data) => {\n  /** Define errors object. */\n  let errors = {};\n\n  /** Replace values to empty string if object key is empty. */\n  data.username = !isEmpty(data.username) ? data.username : '';\n  data.status = !isEmpty(data.status) ? data.status : '';\n\n  /** Set username value to required error message if empty. */\n  if (Validator.isEmpty(data.username)) {\n    errors.username = 'Username is required.';\n  }\n\n  /** Set status value to required error message if empty. */\n  if (Validator.isEmpty(data.status)) {\n    errors.status = 'Status is required.';\n  }\n\n  /** Set website value to invalid if invalid url. */\n  if (\n    data.website &&\n    !Validator.isURL(data.website, {\n      require_protocol: true\n    })\n  ) {\n    errors.website = 'Website URL is invalid.';\n  }\n\n  /** Set linkedin value to invalid if invalid url. */\n  if (\n    data.linkedin &&\n    !Validator.isURL(data.linkedin, {\n      require_protocol: true\n    })\n  ) {\n    errors.linkedin = 'LinkedIn URL is invalid.';\n  }\n\n  /** Set github value to invalid if invalid url. */\n  if (\n    data.github &&\n    !Validator.isURL(data.github, {\n      require_protocol: true\n    })\n  ) {\n    errors.github = 'GitHub URL is invalid.';\n  }\n\n  /** Set stackoverflow value to invalid if invalid url. */\n  if (\n    data.stackoverflow &&\n    !Validator.isURL(data.stackoverflow, {\n      require_protocol: true\n    })\n  ) {\n    errors.stackoverflow = 'Stack Overflow URL is invalid.';\n  }\n\n  /** Set dribbble value to invalid if invalid url. */\n  if (\n    data.dribbble &&\n    !Validator.isURL(data.dribbble, {\n      require_protocol: true\n    })\n  ) {\n    errors.dribbble = 'Dribbble URL is invalid.';\n  }\n\n  /** Set twitter value to invalid if invalid url. */\n  if (\n    data.twitter &&\n    !Validator.isURL(data.twitter, {\n      require_protocol: true\n    })\n  ) {\n    errors.twitter = 'Twitter URL is invalid.';\n  }\n\n  /** Return errors object and isValid boolean value. */\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateProfileInput;\n"]}