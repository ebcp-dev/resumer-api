{"version":3,"sources":["../../src/routes/user.js"],"names":["router","express","Router","post","req","res","body","errors","isValid","status","json","newUser","email","password","bcrypt","genSalt","err","salt","hash","User","findOrCreate","where","defaults","spread","user","created","findOne","then","compare","isMatch","payload","joined","createdAt","jwt","sign","config","secretOrKey","expiresIn","token","success","session","get","passport","authenticate"],"mappings":"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","file":"user.js","sourcesContent":["/** @module src/routes/user */\n\n/** Import dependencies. */\nimport express from 'express';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport passport from 'passport';\nconst router = express.Router();\n\n/** Import defined User schema from sequelize. */\nimport { User } from '../sequelize';\n\n/** Import secretOrKey option from config/keys. */\nimport config from '../config/keys';\n\n/** Import validation function. */\nimport validateRegisterInput from '../validation/register';\nimport validateLoginInput from '../validation/login';\n\n/** User signup route */\nrouter.post('/signup', (req, res) => {\n  const { errors, isValid } = validateRegisterInput(req.body);\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const newUser = {\n    email: req.body.email,\n    password: req.body.password\n  };\n  // Hash password before storing into db\n  bcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(newUser.password, salt, (err, hash) => {\n      newUser.password = hash;\n    });\n  });\n  User.findOrCreate({\n    where: { email: newUser.email },\n    defaults: newUser\n  }).spread((user, created) => {\n    if (!created) {\n      errors.email = 'Email already in use.';\n      return res.status(400).json(errors);\n    } else {\n      return res.status(200).json(user);\n    }\n  });\n});\n\n/** User sign in route. */\nrouter.post('/login', (req, res) => {\n  const { errors, isValid } = validateLoginInput(req.body);\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n  /** Get input from request body. */\n  const email = req.body.email;\n  const password = req.body.password;\n\n  /** Find user by email firsts. */\n  User.findOne({ where: { email } }).then((user) => {\n    if (!user) {\n      errors.email = 'User not found.';\n      return res.status(400).json(errors);\n    }\n    /** Compare input password with hashed password. */\n    bcrypt.compare(password, user.password).then((isMatch) => {\n      if (isMatch) {\n        /** JWT payload */\n        const payload = {\n          email: user.email,\n          joined: user.createdAt\n        };\n        /** Sign the token with payload if passwords matched. */\n        jwt.sign(\n          payload,\n          config.secretOrKey,\n          { expiresIn: 3600 },\n          (err, token) => {\n            return res.status(200).json({\n              success: true,\n              session: 'Bearer ' + token\n            });\n          }\n        );\n      } else {\n        errors.password = 'Incorrect password.';\n        return res.status(400).json(errors);\n      }\n    });\n  });\n});\n\n/** Get current authenticated user route. */\nrouter.get(\n  '/current',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    return res.status(200).json(req.user);\n  }\n);\n\nexport default router;\n"]}