{"version":3,"sources":["../../src/routes/job.js"],"names":["router","express","Router","post","passport","authenticate","session","req","res","body","errors","isValid","status","json","newJob","userId","user","id","role","company","link","location","seniority","salaryRange","Job","findOrCreate","where","defaults","spread","job","created","catch","err","put","updateJob","findOne","then","update","returning","rowsUpdate","updatedJob","delete","linksToDelete","links","destroy","deleted","get","findAll","jobs"],"mappings":"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","file":"job.js","sourcesContent":["/** @module src/routes/job */\n\n/** Import dependencies. */\nimport express from 'express';\nimport passport from 'passport';\nconst router = express.Router();\n\n/** Import defined Job schema from sequelize. */\nimport { Job } from '../sequelize';\n\n/** Import validation function. */\nimport validateJobInput from '../validation/addJob';\n\n/** Add job route. */\nrouter.post(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const { errors, isValid } = validateJobInput(req.body);\n\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n\n    const newJob = {\n      userId: req.user.id,\n      role: req.body.role,\n      company: req.body.company,\n      link: req.body.link,\n      location: req.body.location || '',\n      seniority: req.body.seniority || '',\n      salaryRange: req.body.salaryRange || ''\n    };\n\n    Job.findOrCreate({\n      where: { userId: newJob.userId, link: newJob.link },\n      defaults: newJob\n    })\n      .spread((job, created) => {\n        if (!created) {\n          errors.link = 'Job already added.';\n          return res.status(400).json(errors);\n        } else {\n          return res.status(200).json(job);\n        }\n      })\n      .catch((err) => {\n        return res.status(400).json(err);\n      });\n  }\n);\n\n/** Update job route. */\nrouter.put(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const { errors, isValid } = validateJobInput(req.body);\n\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n\n    const updateJob = {\n      id: req.body.id,\n      role: req.body.role,\n      company: req.body.company,\n      link: req.body.link,\n      location: req.body.location || '',\n      seniority: req.body.seniority || '',\n      salaryRange: req.body.salaryRange || '',\n      status: req.body.status || 'Saved'\n    };\n    /** Check if link is already in user's list. */\n    Job.findOne({\n      where: { userId: req.user.id, link: updateJob.link }\n    }).then((job) => {\n      if (job && job.id !== updateJob.id) {\n        /** 400 error if link is not unique. */\n        errors.link = 'Job already added.';\n        return res.status(400).json(errors);\n      } else {\n        /** Update and return updated if link is unique. */\n        Job.update(updateJob, {\n          returning: true,\n          where: { id: updateJob.id }\n        })\n          .then(([rowsUpdate, [updatedJob]]) => {\n            return res.status(200).json(updatedJob);\n          })\n          .catch((err) => {\n            return res.status(400).json(err);\n          });\n      }\n    });\n  }\n);\n\n/** Delete job route. */\nrouter.delete(\n  '/',\n  passport.authenticate('jwt', {\n    session: false\n  }),\n  (req, res) => {\n    let linksToDelete = req.body.links || [];\n    Job.destroy({ where: { userId: req.user.id, link: linksToDelete } }).then(\n      (deleted) => {\n        if (deleted) {\n          return res.status(200).json({ deleted: true });\n        } else {\n          return res.status(400).json({ deleted: false });\n        }\n      }\n    );\n  }\n);\n\n/** Get list of jobs added by current authenticated user. */\nrouter.get(\n  '/all',\n  passport.authenticate('jwt', {\n    session: false\n  }),\n  (req, res) => {\n    Job.findAll({\n      where: { userId: req.user.id }\n    }).then((jobs) => {\n      return res.status(200).json(jobs);\n    });\n  }\n);\n\nexport default router;\n"]}