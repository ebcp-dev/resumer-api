{"version":3,"sources":["../../src/routes/data.js"],"names":["router","express","Router","post","passport","authenticate","session","req","res","userData","userId","user","id","uniqueData","body","data","errors","isValid","status","json","Data","findOne","where","then","findOrCreate","username","defaults","spread","created","put","dataUpdate","update","returning","rowsUpdated","updatedData","catch","err","get","findAll","User","params","email","error"],"mappings":"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","file":"data.js","sourcesContent":["/** @module src/routes/data */\n\n/** Import dependencies. */\nimport express from 'express';\nimport passport from 'passport';\nconst router = express.Router();\n\n/** Import defined Job schema from sequelize. */\nimport { User, Data } from '../sequelize';\n\n/** Import validation function. */\nimport validateDataInput from '../validation/data';\n\n/** Add data route. */\nrouter.post(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const userData = {\n      userId: req.user.id,\n      uniqueData: req.body.data\n    };\n    const { errors, isValid } = validateDataInput(req.body);\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n    /** Check if data is unique. */\n    Data.findOne({\n      where: { userId: userData.userId }\n    }).then((data) => {\n      if (data) {\n        errors.data = 'Data is not unique.';\n        return res.status(400).json(errors);\n      } else {\n        /** Create data if user has no data yet. */\n        Data.findOrCreate({\n          where: { username: userData.uniqueData },\n          defaults: userData\n        }).spread((userData, created) => {\n          if (!created) {\n            /** Must have unique uniqueData. */\n            errors.uniqueData = 'uniqueData already exists.';\n            return res.status(400).json(errors);\n          } else {\n            return res.status(200).json(userData);\n          }\n        });\n      }\n    });\n  }\n);\n\n/** Update data route. */\nrouter.put(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const dataUpdate = {\n      userId: req.user.id,\n      uniqueData: req.body.data\n    };\n\n    const { errors, isValid } = validateDataInput(dataUpdate);\n\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n    /** Check if uniqueData is unique first. */\n    Data.findOne({\n      where: { uniqueData: dataUpdate.uniqueData }\n    }).then((data) => {\n      /** 400 error if already exists. */\n      if (data && data.userId !== dataUpdate.userId) {\n        errors.uniqueData = 'Data already exists.';\n        return res.status(400).json(errors);\n      } else {\n        /** Update data if uniqueData is unique. */\n        Data.update(dataUpdate, {\n          returning: true,\n          where: { userId: dataUpdate.userId }\n        })\n          .then(([rowsUpdated, [updatedData]]) => {\n            return res.status(200).json(updatedData);\n          })\n          .catch((err) => {\n            return res.status(400).json(err);\n          });\n      }\n    });\n  }\n);\n\n/** Get list of data. */\nrouter.get('/all', (req, res) => {\n  Data.findAll().then((data) => {\n    return res.status(200).json(data);\n  });\n});\n\n/** Get data of current user. */\nrouter.get(\n  '/',\n  passport.authenticate('jwt', {\n    session: false\n  }),\n  (req, res) => {\n    Data.findOne({ where: { userId: req.user.id } }).then((data) => {\n      User.findOne({ where: { id: req.user.id } }).then((user) => {\n        return res.status(200).json(data);\n      });\n    });\n  }\n);\n\n/** Get data of specific user. */\nrouter.get('/:username', (req, res) => {\n  Data.findOne({ where: { username: req.params.username } }).then((data) => {\n    if (data) {\n      User.findOne({ where: { id: data.userId } }).then((user) => {\n        if (user) {\n          return res.status(200).json({ email: user.email, data });\n        }\n      });\n    } else {\n      return res.status(400).json({ error: 'No data found for this user.' });\n    }\n  });\n});\n\nexport default router;\n"]}