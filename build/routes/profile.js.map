{"version":3,"sources":["../../src/routes/profile.js"],"names":["router","express","Router","post","passport","authenticate","session","req","res","userProfile","userId","user","id","username","body","status","website","linkedin","github","stackoverflow","dribbble","twitter","errors","isValid","json","Profile","findOne","where","then","profile","findOrCreate","defaults","spread","created","put","profileUpdate","update","returning","rowsUpdated","updatedProfile","catch","err","get","findAll","profiles","User","params","email","error"],"mappings":"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","file":"profile.js","sourcesContent":["/** @module src/routes/profile */\n\n/** Import dependencies. */\nimport express from 'express';\nimport passport from 'passport';\nconst router = express.Router();\n\n/** Import defined Job schema from sequelize. */\nimport { User, Profile } from '../sequelize';\n\n/** Import validation function. */\nimport validateProfileInput from '../validation/profile';\n\n/** Create profile route. */\nrouter.post(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const userProfile = {\n      userId: req.user.id,\n      username: req.body.username,\n      status: req.body.status,\n      website: req.body.website || '',\n      linkedin: req.body.linkedin || '',\n      github: req.body.github || '',\n      stackoverflow: req.body.stackoverflow || '',\n      dribbble: req.body.dribbble || '',\n      twitter: req.body.twitter || ''\n    };\n    const { errors, isValid } = validateProfileInput(req.body);\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n    /** Check if user has a profile already. */\n    Profile.findOne({\n      where: { userId: userProfile.userId }\n    }).then(profile => {\n      if (profile) {\n        errors.profile = 'You already have a profile.';\n        return res.status(400).json(errors);\n      } else {\n        /** Create profile if user has no profile set up yet. */\n        Profile.findOrCreate({\n          where: { username: userProfile.username },\n          defaults: userProfile\n        }).spread((profile, created) => {\n          if (!created) {\n            /** Must have unique username. */\n            errors.username = 'Username already exists.';\n            return res.status(400).json(errors);\n          } else {\n            return res.status(200).json(profile);\n          }\n        });\n      }\n    });\n  }\n);\n\n/** Update profile route. */\nrouter.put(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const profileUpdate = {\n      userId: req.user.id,\n      username: req.body.username,\n      status: req.body.status,\n      website: req.body.website || '',\n      linkedin: req.body.linkedin || '',\n      github: req.body.github || '',\n      stackoverflow: req.body.stackoverflow || '',\n      dribbble: req.body.dribbble || '',\n      twitter: req.body.twitter || ''\n    };\n\n    const { errors, isValid } = validateProfileInput(profileUpdate);\n\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n    /** Check if username is unique first. */\n    Profile.findOne({\n      where: { username: profileUpdate.username }\n    }).then(profile => {\n      /** 400 error if already exists. */\n      if (profile && profile.userId !== profileUpdate.userId) {\n        errors.username = 'Username already exists.';\n        return res.status(400).json(errors);\n      } else {\n        /** Update profile if username is unique. */\n        Profile.update(profileUpdate, {\n          returning: true,\n          where: { userId: profileUpdate.userId }\n        })\n          .then(([rowsUpdated, [updatedProfile]]) => {\n            return res.status(200).json(updatedProfile);\n          })\n          .catch(err => {\n            return res.status(400).json(err);\n          });\n      }\n    });\n  }\n);\n\n/** Get list of profiles. */\nrouter.get('/all', (req, res) => {\n  Profile.findAll().then(profiles => {\n    return res.status(200).json(profiles);\n  });\n});\n\n/** Get profile of current user. */\nrouter.get(\n  '/',\n  passport.authenticate('jwt', {\n    session: false\n  }),\n  (req, res) => {\n    Profile.findOne({ where: { userId: req.user.id } }).then(profile => {\n      User.findOne({ where: { id: req.user.id } }).then(user => {\n        return res.status(200).json(profile);\n      });\n    });\n  }\n);\n\n/** Get profile of specific user. */\nrouter.get('/:username', (req, res) => {\n  Profile.findOne({ where: { username: req.params.username } }).then(\n    profile => {\n      if (profile) {\n        User.findOne({ where: { id: profile.userId } }).then(user => {\n          if (user) {\n            return res.status(200).json({ email: user.email, profile });\n          }\n        });\n      } else {\n        return res\n          .status(400)\n          .json({ error: 'No profiles found for this user.' });\n      }\n    }\n  );\n});\n\nexport default router;\n"]}