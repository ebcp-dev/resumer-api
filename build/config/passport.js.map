{"version":3,"sources":["../../src/config/passport.js"],"names":["JwtStrategy","passportJWT","Strategy","ExtractJwt","opts","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","config","useJwt","passport","use","jwt_payload","done","User","findOne","where","email","then","user"],"mappings":";;;;;;AAGA;;;;AAGA;;;;AAGA;;;;AALA,IAAMA,cAAcC,sBAAYC,QAAhC,C,CAJA;;AAEA;;AAGA,IAAMC,aAAaF,sBAAYE,UAA/B;;AAGA;;;AAGA;AACA,IAAMC,OAAO,EAAb;AACA;AACAA,KAAKC,cAAL,GAAsBF,WAAWG,2BAAX,EAAtB;AACAF,KAAKG,WAAL,GAAmBC,eAAOD,WAA1B;;AAEA;;;;;AAKA,IAAME,SAAS,SAATA,MAAS,WAAY;AACzBC,WAASC,GAAT,CACE,IAAIX,WAAJ,CAAgBI,IAAhB,EAAsB,UAACQ,WAAD,EAAcC,IAAd,EAAuB;AAC3CC,oBAAKC,OAAL,CAAa,EAAEC,OAAO,EAAEC,OAAOL,YAAYK,KAArB,EAAT,EAAb,EAAsDC,IAAtD,CAA2D,gBAAQ;AACjE,UAAIC,IAAJ,EAAU;AACR,eAAON,KAAK,IAAL,EAAWM,IAAX,CAAP;AACD;AACD,aAAON,KAAK,IAAL,EAAW,KAAX,CAAP;AACD,KALD;AAMD,GAPD,CADF;AAUD,CAXD;;AAaA;kBACeJ,M","file":"passport.js","sourcesContent":["/** @module src/config/passport */\n\n/** Import passport jwt strategy.  */\nimport passportJWT from 'passport-jwt';\nconst JwtStrategy = passportJWT.Strategy;\nconst ExtractJwt = passportJWT.ExtractJwt;\nimport config from './keys';\n\n/** Import defined User schema from sequelize. */\nimport { User } from '../sequelize';\n\n/** Define options object to pass into JwtStrategy function. */\nconst opts = {};\n/** Get token from Authorization Header. */\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = config.secretOrKey;\n\n/**\n * Create new JwtStrategy with passport.\n * Returns the payload once authenticated.\n * @param {passport} passport\n */\nconst useJwt = passport => {\n  passport.use(\n    new JwtStrategy(opts, (jwt_payload, done) => {\n      User.findOne({ where: { email: jwt_payload.email } }).then(user => {\n        if (user) {\n          return done(null, user);\n        }\n        return done(null, false);\n      });\n    })\n  );\n};\n\n/** Export the function. */\nexport default useJwt;\n"]}